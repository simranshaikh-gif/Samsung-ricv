#include <ch32v00x.h>
#include <debug.h> // Includes Delay_Ms and Delay_Us

// Ultrasonic sensor pins
#define TRIG_PORT GPIOA
#define TRIG_PIN GPIO_Pin_1
#define ECHO_PORT GPIOA
#define ECHO_PIN GPIO_Pin_2

// IR sensor pin
#define IR_PORT GPIOD
#define IR_PIN GPIO_Pin_3  // Adjust based on your IR sensor connection

#define CLOCK_ENABLE RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOD, ENABLE)

volatile int passenger_count = 0;

void init_sensors(void);
uint32_t measure_distance(void);
int detect_ir(void);

int main(void)
{
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
    SystemCoreClockUpdate();
    Delay_Init(); // Initializes delay functions from the SDK

    init_sensors();

    printf("Passenger Counter Initialized\n");

    while (1)
    {
        uint32_t distance = measure_distance();
        int ir_detected = detect_ir();

        if (distance < 20 && ir_detected) // Entry detected
        {
            passenger_count++;
            printf("Passenger Entered! Count: %d\n", passenger_count);
            Delay_Ms(500);
        }
        else if (distance > 20 && ir_detected) // Exit detected
        {
            if (passenger_count > 0)
            {
                passenger_count--;
                printf("Passenger Exited! Count: %d\n", passenger_count);
                Delay_Ms(500);
            }
        }

        Delay_Ms(100);
    }
}

void init_sensors(void)
{
    CLOCK_ENABLE;

    GPIO_InitTypeDef GPIO_InitStructure = {0};

    // Configure TRIG pin as output
    GPIO_InitStructure.GPIO_Pin = TRIG_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(TRIG_PORT, &GPIO_InitStructure);

    // Configure ECHO pin as input
    GPIO_InitStructure.GPIO_Pin = ECHO_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(ECHO_PORT, &GPIO_InitStructure);

    // Configure IR sensor pin as input
    GPIO_InitStructure.GPIO_Pin = IR_PIN;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    GPIO_Init(IR_PORT, &GPIO_InitStructure);
}

uint32_t measure_distance(void)
{
    uint32_t time = 0;

    // Send trigger pulse
    GPIO_WriteBit(TRIG_PORT, TRIG_PIN, Bit_SET);
    Delay_Us(10);
    GPIO_WriteBit(TRIG_PORT, TRIG_PIN, Bit_RESET);

    // Wait for echo signal to go HIGH
    while (!GPIO_ReadInputDataBit(ECHO_PORT, ECHO_PIN));

    // Measure pulse width
    while (GPIO_ReadInputDataBit(ECHO_PORT, ECHO_PIN))
    {
        time++;
        Delay_Us(1);
    }

    return time * 0.034 / 2; // Convert time to distance in cm
}

int detect_ir(void)
{
    return GPIO_ReadInputDataBit(IR_PORT, IR_PIN) == Bit_RESET; // Returns 1 if IR beam is broken
}
